print(paste0("Number of voters required in ",voters$Region[4], ": ",floor(n4)))
View(voters)
set.seed(543)
samp <- c()
N <- 10000
for(i in 1:N){
a <- sample(grades$grade,size = 10)
xbar <- mean(a)
z <- qnorm(0.975)
sigma <- sd(a)
sqrtn <- sqrt(length(a))
LI <- xbar - (z * (sigma/sqrtn))
UI <- xbar + (z * (sigma/sqrtn))
if(mean(grades$grade) >= LI & mean(grades$grade) <= UI){
samp[i] <- 1
}else{
samp[i] <- 0
}
}
print(paste0("The Coverage Probability is: ",(sum(samp)/N)*100, "%"))
###################################################
### code chunk number 2: importdata
###################################################
blocks = read.csv("C:\\Users\\dhata\\data_543\\labs\\lab1\\blocks.csv", header=TRUE)
nrow(blocks) # should be 100 data points
head(blocks)
attach(blocks) # so we can call the attributes by name
###################################################
### code chunk number 3: meanWeightDist
###################################################
par(mfrow=c(1,2))
mu_w = mean(Weights)
hist(Weights)
mu_p = mean(Perimeter)
hist(Perimeter)
###################################################
### code chunk number 4: 01Lab.Rnw:162-163
###################################################
n = 10
###################################################
### code chunk number 5: SRSWOR
###################################################
set.seed(543)
sample1 = sample(1:100, n)
###################################################
### code chunk number 6: SRSWORestimates
###################################################
wbar = mean(Weights[sample1]); wsd = sd(Weights[sample1])
###################################################
### code chunk number 7: SRSWRestimates
###################################################
set.seed(543)
sample2 = sample(1:100, n, replace=TRUE)
wbar2 = mean(Weights[sample2])
wsd2 = sd(Weights[sample2])
###################################################
### code chunk number 8: 01Lab.Rnw:200-222
###################################################
M = 10^4
n = c(5, 10, 15, 20)
names(n) = paste("n", n, sep="=")
# store the results for a SRSWOR
z1 = matrix(0, nrow=M, ncol=length(n))
# store the results for a SRSWR
z2 = matrix(0, nrow=M, ncol=length(n))
colnames(z1) = colnames(z2) = paste("n", n, sep="=")
for (i in 1:M) {
for (j in 1:length(n)) {
sample1  = sample(1:100, n[j])
sample2  = sample(1:100, n[j], replace=TRUE)
## the sample averages
ybar1 = mean(Weights[sample1])
ybar2 = mean(Weights[sample2])
z1[i,j] = ybar1
z2[i,j] = ybar2
}
}
###################################################
### code chunk number 9: empiricalDistSRSWOR
###################################################
par(mfrow=c(2,2))
for (j in 1:4) {
hist(z1[,j], main= paste("SRSWOR, n=", n[j]) , xlim=c(20,80),
xlab="the approximate sampling \n distribution")
abline(v=mu_w, col=2) # compare with the true value
}
###################################################
### code chunk number 10: empiricalDistSRSWR
###################################################
par(mfrow=c(2,2))
for (j in 1:4) {
hist(z2[,j], main= paste("SRSWR, n=", n[j]) , xlim=c(20,80),
xlab="the approximate sampling \n distribution")
abline(v=mu_w, col=2) # compare with the true value
}
###################################################
### code chunk number 11: meanComparison
###################################################
round(apply(z1,2,mean),3)
round(apply(z2,2,mean),3)
mu_w
###################################################
### code chunk number 12: empiricalVariance
###################################################
round( apply(z1,2,var),2) # variance of muhat using SRSWOR
round( apply(z2,2,var),2) # variance of muhat using SRSWR
###################################################
### code chunk number 13: theoreticalVariance
###################################################
round((1-n/100)*var(Weights)/n, 2) # variance of muhat using SRSWOR
round((1-1/100)*var(Weights)/n, 2) # variance of muhat using SRSWR
###################################################
### code chunk number 14: 01Lab.Rnw:263-266
###################################################
mu.per = mean(blocks$Perimeter)
mu.wts = mean(blocks$Weights)
N = nrow(blocks)
###################################################
### code chunk number 15: 01Lab.Rnw:308-333
###################################################
summary.strata2 <- function(y=NULL, strata=NULL, labels=NULL) {
## y is a numerical vector
## strata is vector containing strata allocations
## label is vector of the strata names
Nh = table(strata)
Wh = Nh/length(strata)
temp = aggregate(y, by=list(strata), FUN=function(z) { c(mean(z), sd(z) )   })
temp = as.matrix(temp)[,-1]
temp = as.data.frame(temp)
temp[,3] = Wh
if (is.null(labels)) temp[,4] = 1:length(Wh)
else temp[,4] = labels
names(temp) = c("Average", "Stdev", "Weight", "Strata")
temp = temp[,c(4,3,1,2)]
temp[,5] = temp$Weight * temp$Stdev
temp[,5] = temp[,5]/sum(temp[,5])
names(temp)[5] = "Optimal.Weight"
return(temp)
}
N = nrow(blocks)
###################################################
### code chunk number 17: 01Lab.Rnw:348-369
###################################################
summary.strata <- function(y=NULL, strata=NULL, labels=NULL) {
## y is a numerical vector
## strata is vector containing strata allocations
## label is vector of the strata names
Nh = table(strata)
Wh = Nh/length(strata)
temp = aggregate(y, by=list(strata), FUN=function(z) { c(mean(z), sd(z))   })
temp = as.matrix(temp)[,-1]
temp = as.data.frame(temp)
temp[,3] = Wh
if (is.null(labels)) temp[,4] = 1:length(Wh)
else temp[,4] = labels
names(temp) = c("Average", "StDev", "Weight", "Strata")
temp = temp[,c(4,3,1,2)]
return(temp)
}
print(paste0("Raw Estimate for the proportion of Trump Supporters: ", round(sum((voters$nh/sum(voters$nh) * voters$ph)),5)*100,"%"))
print(paste0("Stratified Sample Estimate for the proportion of Trump Supporters: ", round(sum((voters$Wh * voters$ph)),5)*100, "%"))
varraw <- sum( (1 - (sum(voters$nh)/sum(voters$Nh))) * ((voters$ph * (1-voters$ph) / (sum(voters$nh) - 1))))
LI_raw <- round(sum((voters$nh/sum(voters$nh) * voters$ph)) - qnorm(0.975) * sqrt(varraw), 5) * 100
UI_raw <- round(sum((voters$nh/sum(voters$nh) * voters$ph)) + qnorm(0.975) * sqrt(varraw),5) * 100
print(paste0(LI_raw, "%, ", UI_raw,"%"))
varstra <- sum( (1 - (voters$nh/voters$Nh)) * ((voters$Nh / sum(voters$Nh))^2) *  ((voters$ph * (1 - voters$ph)) / (voters$nh - 1)))
LI_strata <- round(sum((voters$Wh * voters$ph)) - qnorm(0.975) * sqrt(varstra),5) * 100
UI_strata <- round(sum((voters$Wh * voters$ph)) + qnorm(0.975) * sqrt(varstra),5) * 100
print(paste0(LI_strata, "%, ", UI_strata,"%"))
z <- qnorm(0.975)
n0 <- z * sqrt((1 - (samp/N))) * (sqrt(varN)/sqrt(samp))
N <- 1000
meanN <- 100
varN <- 50
samp <- 100
z <- qnorm(0.975)
e <- 0.5
n0 <- z * sqrt((1 - (samp/N))) * (sqrt(varN)/sqrt(samp))
N <- 1000
meanN <- 100
varN <- 50
samp <- 100
z <- qnorm(0.975)
e <- 0.5
n0 <- z^2 * (varN/(e^2))
50/(0.5^2)
1.96*200
(1.96^2)*200
((z^2)*(varN)) / ((0.5^2) + (((z^2)*(varN)) / N ))
se_muhat <- 25 * (sqrt((1 - (100/3645)) / 3645))
muhat <- 27
muhat <- 27
N <- 3645
n <- 100
se_muhat <- 25 * (sqrt((1 - (n/N)) / N))
z = qnorm(0.975)
LI <- (N*muhat) - (z * N* se_muhat)
UI <- (N*muhat) + (z * N* se_muhat)
print(LI);print(UI)
muhat <- 27
N <- 3645
n <- 100
se_muhat <- 25 * (sqrt((1 - (n/N)) / n))
z = qnorm(0.975)
LI <- (N*muhat) - (z * N* se_muhat)
UI <- (N*muhat) + (z * N* se_muhat)
print(LI);print(UI)
muhat <- 27
N <- 3645
n <- 100
f <- n/N
se_muhat <- 25 * (sqrt(1 - f) / n))
muhat <- 27
N <- 3645
n <- 100
f <- n/N
se_muhat <- 25 * (sqrt(1 - f) / n)
z = qnorm(0.975)
LI <- (N*muhat) - (z * N* se_muhat)
UI <- (N*muhat) + (z * N* se_muhat)
print(LI);print(UI)
muhat <- 27
N <- 3645
n <- 100
f <- n/N
se_muhat <- 25 * (sqrt((1 - f) / n)
z = qnorm(0.975)
muhat <- 27
N <- 3645
n <- 100
f <- n/N
se_muhat <- 25 * (sqrt((1 - f) / n))
z = qnorm(0.975)
LI <- (N*muhat) - (z * N* se_muhat)
UI <- (N*muhat) + (z * N* se_muhat)
print(LI);print(UI)
(sqrt((1 - f) / n))
25 * (sqrt((1 - f) / n))
muhat <- 27
N <- 3645
n <- 100
f <- n/N
se_muhat <- 25 * (sqrt((1 - f) / n))
z = qnorm(0.975)
LI <- (N*muhat) - (z * N* se_muhat)
UI <- (N*muhat) + (z * N* se_muhat)
print(LI);print(UI)
se_muhat <- 25 * (sqrt((1 - (200/3645)) / n))
se_muhat <- 25 * (sqrt((1 - (100/3645)) / n))
25 * (sqrt((1 - (100/3645)) / n))
25 * (sqrt((1 - (200/3645)) / n))
25 * (sqrt((1 - (400/3645)) / n))
a <- 25 * (sqrt((1 - (600/3645)) / n))
(N*muhat) - (z * N* a)
(N*muhat) + (z * N* a)
(N*50) + (z * N* se_muhat)
(N*50) - (z * N* se_muhat)
(N*10) - (z * N* se_muhat)
(N*100) - (z * N* se_muhat)
(N*100) + (z * N* se_muhat)
(N*200) + (z * N* se_muhat)
(N*200) -\ (z * N* se_muhat)
(N*200) - (z * N* se_muhat)
(N*200) + (z * N* se_muhat)
(N*500) + (z * N* se_muhat)
(N*500) - (z * N* se_muhat)
(N*500) + (z * N* se_muhat) - (N*500) - (z * N* se_muhat)
((N*500) + (z * N* se_muhat)) - ((N*500) - (z * N* se_muhat) )
UI - LI
a <- 50 * (sqrt((1 - f) / n))
(N*muhat) - (z * N* a)
(N*muhat) + (z * N* a)
n1 <- sum(voters$nh)*(voters$Nh[1]/sum(voters$Nh))
podcasts <- read.csv("C:\\Users\\dhata\\data_543\\assignments\\assignment1\\Podcasts.csv")
grades <- read.csv("C:\\Users\\dhata\\data_543\\assignments\\assignment1\\grades.csv")
voters <- data.frame(Region = c("Northeast", "Midwest", "South", "West"), Nh = NA, Wh = NA, nh = NA, wh = NA, Ï€h = NA)
voters$Nh <- c(44644808, 52546066, 94590118, 59326414)
voters$Wh <- voters$Nh / sum(voters$Nh)
voters$nh <- c(10108658+13652408, 15559072+14184562, 25867401+21967373, 11444729+16040609)
voters$wh <- voters$nh / sum(voters$nh)
voters$ph <- c(10108658, 15559072, 25867401, 11444729) / voters$nh
View(voters)
(10*0.31) + (22*0.42) + (48*0.27)
250*5
250*5*0.25
250*0.25
5*0.25
(0.31*9)/( (0.31*9) + (0.42*19) + (0.27*30))
(0.42*19)/( (0.31*9) + (0.42*19) + (0.27*30))
(0.27*30)/( (0.31*9) + (0.42*19) + (0.27*30))
1137*((0.31*9)/( (0.31*9) + (0.42*19) + (0.27*30)))
100*0.1478
iris_data <- iris
mean(iris$Petal.Length)
var(iris$Petal.Length)
samp <- sample(iris$Petal.Length, 90)
mean(samp)
var(samp)
View(iris_data)
sdsamp <- sd(samp)
length(samp)
f <- length(samp) / length(iris)
length(samp) / length(iris)
n <- length(samp)
se_muhat <- sdsamp * (sqrt((1-f)/n))
(sqrt((1-f)/n))
1-f
90/150
length(samp)
f <- length(samp) / nrow(iris)
sdsamp <- sd(samp)
f <- length(samp) / nrow(iris)
n <- length(samp)
se_muhat <- sdsamp * (sqrt((1-f)/n))
LI <- mean(samp) - (qnorm(0.975) * se_muhat)
UI <- mean(samp) - (qnorm(0.975) * se_muhat)
UI <- mean(samp) + (qnorm(0.975) * se_muhat)
0.95*35
0.05*35
10*0.34
22*0.31
48*0.35
16.8+6.82+3.4
rm(list = ls()[!ls() %in% c("grades")])
ls()
if(!require(httr)){install.packages("httr")}; require(httr)
github_api <- function(path) {
url <- modify_url("https://ssd-api.jpl.nasa.gov/fireball.api", path = path)
GET(url)
}
github_api <- function(query) {
url <- modify_url("https://ssd-api.jpl.nasa.gov/fireball.api"\)
GET(url, query  = list(limit = 3))
}
github_api <- function(lim) {
url <- modify_url("https://ssd-api.jpl.nasa.gov/fireball.api"\)
GET(url, query  = list(limit = lim))
}
github_api <- function(lim) {
url <- modify_url("https://ssd-api.jpl.nasa.gov/fireball.api")
GET(url, query  = list(limit = lim))
}
github_api()
github_api(3)
github_api <- function(lim) {
url <- modify_url("https://ssd-api.jpl.nasa.gov/fireball.api")
GET(url, query  = list(limit = lim, energy-min = 0.6))
}
github_api <- function(lim) {
url <- modify_url("https://ssd-api.jpl.nasa.gov/fireball.api")
GET(url, query  = list(limit = lim))
}
github_api(3)
github_api <- function(lim) {
url <- modify_url("https://ssd-api.jpl.nasa.gov/fireball.api")
GET(url, query  = list(energy-min = lim))
}
github_api <- function(lim) {
url <- modify_url("https://ssd-api.jpl.nasa.gov/fireball.api")
GET(url, query  = list(`energy-min` = lim))
}
github_api(3)
github_api <- function(lim) {
url <- modify_url("https://ssd-api.jpl.nasa.gov/fireball.api")
GET(url, query  = list(limit = lim,`energy-min` = lim))
}
github_api(3)
if(!require(jsonlite)){install.packages("jsonlite")}; require(jsonlite)
github_api <- function(lim) {
url <- modify_url("https://ssd-api.jpl.nasa.gov/fireball.api")
GET(url, query  = list(limit = lim,`energy-min` = lim))
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
structure(
list(
content = parsed,
path = path,
response = resp
),
class = "github_api"
)
}
github_api(3)
github_api <- function(lim) {
url <- modify_url("https://ssd-api.jpl.nasa.gov/fireball.api")
resp <- GET(url, query  = list(limit = lim,`energy-min` = lim))
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
structure(
list(
content = parsed,
path = path,
response = resp
),
class = "github_api"
)
}
github_api(3)
github_api <- function(lim) {
url <- modify_url("https://ssd-api.jpl.nasa.gov/fireball.api")
resp <- GET(url, query  = list(limit = lim,`energy-min` = lim))
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
structure(
list(
content = parsed,
response = resp
),
class = "github_api"
)
}
github_api(3)
a <- github_api(3)
View(a)
a[["response"]]
a[["response"]][1]
a[["response"]][5]
a[["response"]][4]
a[["data"]]
a[["response"]]["data"]
View(a)
View(a)
a[[2]][1]
a[[2]][2]
a[[2]][3]
a[[2]][4]
a[[2]][5]
a[[2]][6]
a[[2]][7]
a[[2]][8]
a[[2]][9]
a[[2]][10]
github_api <- function(lim) {
url <- modify_url("https://ssd-api.jpl.nasa.gov/fireball.api")
resp <- GET(url, query  = list(limit = lim,`energy-min` = lim))
# parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
#
# structure(
#   list(
#     content = parsed,
#     response = resp
#   ),
#   class = "github_api"
# )
}
a <- github_api(3)
View(a)
if(!require(rjson)){install.packages("rjson")}; require(rjson)
lim <- 3
url <- modify_url("https://ssd-api.jpl.nasa.gov/fireball.api")
resp <- GET(url, query  = list(limit = lim,`energy-min` = lim))
parsed <- rjson::fromJSON(resp)
parsed <- rjson::fromJSON(paste(readLines(resp), collapse=""))
jsonlite::fromJSON('{"city" : "Z\\u00FCrich"}')
data2 <- fromJSON("https://api.github.com/users/hadley/repos")
data2 <- jsonlite::fromJSON("https://api.github.com/users/hadley/repos")
View(data2)
names(data2)
names(data2$owner)
data2$owner$login
View(data2)
parsed <- jsonlite::fromJSON(resp)
parsed <- jsonlite::fromJSON(content(resp,"text"))
View(parsed)
parsed[[data]]
parsed[["data"]]
as <- as.data.frame(parsed[["data"]])
View(as)
View(a)
View(parsed)
parsed[["fields"]]
colnames(as) <- parsed[["fields"]]
View(as)
a <- github_api(3)
github_api <- function(lim) {
url <- modify_url("https://ssd-api.jpl.nasa.gov/fireball.api")
resp <- GET(url, query  = list(limit = lim,`energy-min` = lim))
parsed <- jsonlite::fromJSON(content(resp,"text"))
as <- as.data.frame(parsed[["data"]])
colnames(as) <- parsed[["fields"]]
}
a <- github_api(3)
url <- modify_url("https://ssd-api.jpl.nasa.gov/fireball.api")
resp <- GET(url, query  = list(limit = lim,`energy-min` = lim))
parsed <- jsonlite::fromJSON(content(resp,"text"))
as <- as.data.frame(parsed[["data"]])
colnames(as) <- parsed[["fields"]]
github_api <- function(lim) {
url <- modify_url("https://ssd-api.jpl.nasa.gov/fireball.api")
resp <- GET(url, query  = list(limit = lim,`energy-min` = lim))
parsed <- jsonlite::fromJSON(content(resp,"text"))
as <- as.data.frame(parsed[["data"]])
colnames(as) <- parsed[["fields"]]
return(as)
}
a <- github_api(3)
View(a)
View(a)
github_api <- function(lim, min_e) {
url <- modify_url("https://ssd-api.jpl.nasa.gov/fireball.api")
resp <- GET(url, query  = list(limit = lim,`energy-min` = min_e))
parsed <- jsonlite::fromJSON(content(resp,"text"))
as <- as.data.frame(parsed[["data"]])
colnames(as) <- parsed[["fields"]]
return(as)
}
a <- github_api(10,0.6)
View(a)
if(!require(devtools)){install.packages("devtools")}; require(devtools)
if(!require(roxygen2)){install.packages("roxygen2")}; require(roxygen2)
if(!require(testthat)){install.packages("testthat")}; require(testthat)
if(!require(knitr)){install.packages("knitr")}; require(knitr)
if(!require(rstudioapi)){install.packages("rstudioapi")}; require(rstudioapi)
rstudioapi::isAvailable("0.99.149")
View(as)
